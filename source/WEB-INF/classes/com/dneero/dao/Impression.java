package com.dneero.dao;

import com.dneero.dao.hibernate.BasePersistentClass;
import com.dneero.dao.hibernate.RegerEntity;
import com.dneero.dao.hibernate.HibernateUtil;
import com.dneero.util.GeneralException;
import com.dneero.session.AuthControlled;
import org.apache.log4j.Logger;

import java.util.Set;
import java.util.HashSet;
import java.util.Date;

/**
 * Blogger generated by hbm2java
 */

public class Impression extends BasePersistentClass implements java.io.Serializable, RegerEntity, AuthControlled {


    // Fields
     private int impressionid;
     private int surveyid;
     private String referer;
     private int impressionsqualifyingforpayment;
     private int quality;
     private Date firstseendate;
     private Set<Impressiondetail> impressiondetails = new HashSet<Impressiondetail>();
     private Blog blog;



    //Validator
    public void validateRegerEntity() throws GeneralException {

    }

    //Loader
    public void load(){

    }

    public static Impression get(int id) {
        Logger logger = Logger.getLogger("com.dneero.dao.Impression");
        try {
            logger.debug("Impression.get(" + id + ") called.");
            Impression obj = (Impression) HibernateUtil.getSession().get(Impression.class, id);
            if (obj == null) {
                logger.debug("Impression.get(" + id + ") returning new instance because hibernate returned null.");
                return new Impression();
            }
            return obj;
        } catch (Exception ex) {
            logger.error("com.dneero.dao.Impression", ex);
            return new Impression();
        }
    }

    // Constructors

    /** default constructor */
    public Impression() {
    }


    public boolean canRead(User user){
        Survey survey = Survey.get(surveyid);
        Researcher researcher = Researcher.get(survey.getResearcherid());
        if (user.getUserid()==researcher.getUserid()){
            return true;
        }
        if (blog!=null){
            Blogger blogger = Blogger.get(blog.getBloggerid());
            if (user.getUserid()==blogger.getUserid()){
                return true;
            }
        }
        return false;
    }

    public boolean canEdit(User user){
        return canRead(user);
    }



    // Property accessors

    public int getImpressionid() {
        return impressionid;
    }

    public void setImpressionid(int impressionid) {
        this.impressionid = impressionid;
    }

    public int getSurveyid() {
        return surveyid;
    }

    public void setSurveyid(int surveyid) {
        this.surveyid = surveyid;
    }

    public int getImpressionsqualifyingforpayment() {
        return impressionsqualifyingforpayment;
    }

    public void setImpressionsqualifyingforpayment(int impressionsqualifyingforpayment) {
        this.impressionsqualifyingforpayment = impressionsqualifyingforpayment;
    }

    public String getReferer() {
        return referer;
    }

    public void setReferer(String referer) {
        this.referer = referer;
    }

    public Set<Impressiondetail> getImpressiondetails() {
        return impressiondetails;
    }

    public void setImpressiondetails(Set<Impressiondetail> impressiondetails) {
        this.impressiondetails = impressiondetails;
    }

    public int getQuality() {
        return quality;
    }

    public void setQuality(int quality) {
        this.quality = quality;
    }

    public Date getFirstseendate() {
        return firstseendate;
    }

    public void setFirstseendate(Date firstseendate) {
        this.firstseendate = firstseendate;
    }

    public Blog getBlog() {
        return blog;
    }

    public void setBlog(Blog blog) {
        this.blog = blog;
    }
}
