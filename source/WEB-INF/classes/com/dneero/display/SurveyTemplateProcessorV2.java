package com.dneero.display;

import com.dneero.display.components.def.ComponentTypes;
import com.dneero.display.components.def.Component;
import com.dneero.util.Num;
import com.dneero.dao.*;
import com.dneero.dao.hibernate.HibernateUtil;
import com.dneero.helpers.NicknameHelper;

import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.ByteArrayOutputStream;

import org.apache.log4j.Logger;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Text;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

/**
 * User: Joe Reger Jr
 * Date: Feb 13, 2009
 * Time: 10:26:14 AM
 */
public class SurveyTemplateProcessorV2 {

    public static String getSurveyForTaking(Survey survey, Blogger blogger, Response response, boolean makeHttpsIfSSLIsOn){
        //@todo performance, is this back and forth between string and doc really necessary?
        String template = survey.getTemplate();
        if (template==null){
            template = "";
        }
        if (template.equals("")){
            template = getAutoGeneratedTemplateForSurvey(survey);
        }
        template = appendExtraQuestionsIfNecessary(survey, template);
        Document doc = getDocFromString(template);
        Element element = doc.getRootElement();
        String out = getHtmlForInput(survey, blogger, response, element);
        return "<div style=\"background : #ffffff; border: 0px solid #ffffff; padding : 5px; width : 400px; overflow : auto;\">"+out.toString()+"</div>";
    }

    public static String getSurveyForDisplay(Survey survey, Blogger blogger, Response response, boolean makeHttpsIfSSLIsOn, boolean displayEvenIfSysadminRejected){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        StringBuffer out = new StringBuffer();
        //If this response is rejected, don't allow display
        if (!displayEvenIfSysadminRejected){
            if (blogger!=null && response!=null){
                if (response.getIssysadminrejected()){
                    return "<p>This conversation is not currently available.</p>";
                }
            }
        }
        String template = survey.getTemplate();
        if (template==null){
            template = "";
        }
        if (template.equals("")){
            template = getAutoGeneratedTemplateForSurvey(survey);
        }
        template = appendExtraQuestionsIfNecessary(survey, template);
        Document doc = getDocFromString(template);
        Element element = doc.getRootElement();
        out.append(getHtmlForDisplay(survey, blogger, response, element));
        //Add Userquestion stuff for display
        List<Questionresponse> responses = new ArrayList<Questionresponse>();
        if (blogger!=null && response!=null){
            responses = HibernateUtil.getSession().createQuery("from Questionresponse where bloggerid='"+blogger.getBloggerid()+"' and responseid='"+response.getResponseid()+"'").list();
            if (responses!=null){
                logger.debug("responses.size()="+responses.size());
                for (Iterator<Questionresponse> qrIt=responses.iterator(); qrIt.hasNext();) {
                    Questionresponse questionresponse=qrIt.next();
                    Question question = Question.get(questionresponse.getQuestionid());
                    if (question.getIsuserquestion()){
                        Component component = ComponentTypes.getComponentByType(question.getComponenttype(), question, blogger);
                        User userwhocreatedquestion = User.get(question.getUserid());
                        out.append("<p>");
                        out.append(NicknameHelper.getNameOrNickname(userwhocreatedquestion)+" asked:");
                        out.append("</p>");
                        out.append("<p>");
                        out.append(component.getHtmlForDisplay(response));
                        out.append("</p>");
                    }
                }
            }
        }
        return out.toString().trim();
    }

    public static Document getXmlForDisplay(Survey survey, Blogger blogger, Response response, boolean makeHttpsIfSSLIsOn, boolean displayEvenIfSysadminRejected){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        Document out = new Document();
        //If this response is rejected, don't allow display
        if (!displayEvenIfSysadminRejected){
            if (blogger!=null && response!=null){
                if (response.getIssysadminrejected()){
                    Element el = new Element("error");
                    el.setContent(new Text("This conversation is not currently available."));
                    out.addContent(el);
                    return out;
                }
            }
        }
        String template = survey.getTemplate();
        if (template==null){
            template = "";
        }
        if (template.equals("")){
            template = getAutoGeneratedTemplateForSurvey(survey);
        }
        template = appendExtraQuestionsIfNecessary(survey, template);
        Document templateDoc = getDocFromString(template);
        Element templateRootElement = templateDoc.getRootElement();
        out.addContent(getXmlForDisplay(survey, blogger, response, templateRootElement));
        //Add Userquestion stuff for display
        List<Questionresponse> responses = new ArrayList<Questionresponse>();
        if (blogger!=null && response!=null){
            responses = HibernateUtil.getSession().createQuery("from Questionresponse where bloggerid='"+blogger.getBloggerid()+"' and responseid='"+response.getResponseid()+"'").list();
            if (responses!=null){
                logger.debug("responses.size()="+responses.size());
                for (Iterator<Questionresponse> qrIt=responses.iterator(); qrIt.hasNext();) {
                    Questionresponse questionresponse=qrIt.next();
                    Question question = Question.get(questionresponse.getQuestionid());
                    if (question.getIsuserquestion()){
                        Component component = ComponentTypes.getComponentByType(question.getComponenttype(), question, blogger);
                        User userwhocreatedquestion = User.get(question.getUserid());
                        Element q = component.getXmlForDisplay(response);
                        q.setAttribute("isuserquestion", "true");
                        q.setAttribute("userwhocreatedquestion", NicknameHelper.getNameOrNickname(userwhocreatedquestion));
                        q.setAttribute("useridwhocreatedquestion", String.valueOf(userwhocreatedquestion.getUserid()));
                        out.addContent(q);
                    }
                }
            }
        }
        return out;
    }

    public static String getAutoGeneratedTemplateForSurvey(Survey survey){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        HibernateUtil.getSession().saveOrUpdate(survey);
        try {
            Document doc = nullDocCheck(null);
            for (Iterator<Question> iterator = survey.getQuestions().iterator(); iterator.hasNext();) {
                Question question = iterator.next();
                if (!question.getIsuserquestion()){
                    Element q = new Element("question");
                    q.setAttribute("questionid", String.valueOf(question.getQuestionid()));
                    doc.getRootElement().addContent(q);
                }
            }
            return docToString(doc);
        } catch (Exception ex) {
            logger.error("",ex);
        }
        return "";
    }

    private static Element getChild(Element element, String childname){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        List<Element> children = element.getChildren();
        if (children==null){
            logger.debug("children==null");
        }
        logger.debug("children.size()="+children.size());
        if (children!=null && children.size()>0){

            for (Iterator<Element> elementIterator=children.iterator(); elementIterator.hasNext();) {
                Element element1=elementIterator.next();
                if (element1.getName().equals(childname)){
                    return element1;
                }
            }
        }
        return null;
    }

    private static String docToString(Document doc){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        try {
            XMLOutputter serializer = new XMLOutputter();
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            serializer.output(doc, out);
            return out.toString();
        } catch (Exception ex) {
            logger.error("",ex);
        }
        return "";
    }

    public static String appendExtraQuestionsIfNecessary(Survey survey, String currentTemplate){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        Document doc = getDocFromString(currentTemplate);
        for (Iterator<Question> iterator = survey.getQuestions().iterator(); iterator.hasNext();) {
            Question question = iterator.next();
            if (!question.getIsuserquestion()){
                if (!isQuestionInTemplate(question, doc)){
                    Element q = new Element("question");
                    q.setAttribute("questionid", String.valueOf(question.getQuestionid()));
                    doc.getRootElement().addContent(q);
                }
            }
        }
        return docToString(doc);
    }

    private static Document getDocFromString(String template){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        Document doc = null;
        if (template!=null && !template.equals("")){
            SAXBuilder builder = new SAXBuilder();
            try{
                doc = builder.build(new java.io.ByteArrayInputStream(template.getBytes()));
            } catch (Exception ex){
                logger.error("",ex);
            }
        }
        return nullDocCheck(doc);
    }

    private static Document nullDocCheck(Document doc){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        if (doc==null){
            Element crit = new Element("template");
            doc = new Document(crit);
        }
        if (!doc.getRootElement().getName().equals("template")){
            logger.debug("Root element was not template, overwriting document.");
            Element crit = new Element("template");
            doc = new Document(crit);
        }
        return doc;
    }



    private static boolean isQuestionInTemplate(Question question, Document doc){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        Element element = doc.getRootElement();
        if (isQuestionInElement(question, element)){
            return true;
        }
        return false;
    }

    private static boolean isQuestionInElement(Question question, Element node){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        try{
            if (node==null){
                return false;
            }
            //Check this element
            if (node.getName().equals("question")){
                if (Num.isinteger(node.getAttribute("questionid").getValue())){
                    if (question.getQuestionid()==Integer.parseInt(node.getAttribute("questionid").getValue())){
                        return true;
                    }
                }
            }
            //Check children
            if (node.getChildren()!=null && node.getChildren().size()>0){
                for (Iterator iterator = node.getChildren().iterator(); iterator.hasNext();) {
                    Element element = (Element) iterator.next();
                    if (isQuestionInElement(question, element)){
                        return true;
                    }
                }
            }
        } catch (Exception ex) {
            logger.error("",ex);
        }
        return false;
    }



    private static String getHtmlForInput(Survey survey, Blogger blogger, Response response, Element templateNode){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        StringBuffer out = new StringBuffer();
        try{
            if (templateNode==null){
                return "";
            }
            //This templateNode
            ComponentTypes ct = new ComponentTypes();
            Component component = ct.getByElement(templateNode, blogger, survey);
            if (component!=null){
                out.append(component.getHtmlForInput(response) + "<br>");
            }
            //Children
            if (templateNode.getChildren()!=null && templateNode.getChildren().size()>0){
                for (Iterator iterator = templateNode.getChildren().iterator(); iterator.hasNext();) {
                    Element element = (Element) iterator.next();
                    out.append(getHtmlForInput(survey, blogger, response, element));
                }
            }
        } catch (Exception ex) {
            logger.error("",ex);
        }
        return out.toString();
    }


    private static String getHtmlForDisplay(Survey survey, Blogger blogger, Response response, Element templateNode){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        StringBuffer out = new StringBuffer();
        try{
            if (templateNode==null){
                return "";
            }
            //This templateNode
            ComponentTypes ct = new ComponentTypes();
            Component component = ct.getByElement(templateNode, blogger, survey);
            if (component!=null){
                out.append(component.getHtmlForDisplay(response) + "<br>");
            }
            //Children
            if (templateNode.getChildren()!=null && templateNode.getChildren().size()>0){
                for (Iterator iterator = templateNode.getChildren().iterator(); iterator.hasNext();) {
                    Element element = (Element) iterator.next();
                    out.append(getHtmlForDisplay(survey, blogger, response, element));
                }
            }
        } catch (Exception ex) {
            logger.error("",ex);
        }
        return out.toString();
    }

    private static Element getXmlForDisplay(Survey survey, Blogger blogger, Response response, Element templateNode){
        Logger logger = Logger.getLogger(SurveyTemplateProcessorV2.class);
        Element out = null;
        try{
            if (templateNode==null){
                return null;
            }
            logger.debug("templateNode.getName()="+templateNode.getName());
            //This templateNode
            ComponentTypes ct = new ComponentTypes();
            Component component = ct.getByElement(templateNode, blogger, survey);
            if (component!=null){
                logger.debug("adding content for templateNode");
                out = component.getXmlForDisplay(response);
            }
            //Children
            if (templateNode.getChildren()!=null && templateNode.getChildren().size()>0){
                for (Iterator iterator = templateNode.getChildren().iterator(); iterator.hasNext();) {
                    Element element = (Element) iterator.next();
                    logger.debug("(child) element.getName()="+element.getName()+"... will call getXmlForDisplay()");
                    Element eltoadd = getXmlForDisplay(survey, blogger, response, element);
                    if (eltoadd!=null){
                        if (out!=null){
                            out.addContent(eltoadd);
                        } else {
                            out = eltoadd;
                        }
                    }
                }
            }
        } catch (Exception ex) {
            logger.error("",ex);
        }
        return out;
    }




}